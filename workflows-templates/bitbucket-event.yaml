#example:
#https://github.com/argoproj/argo-events/blob/master/examples/event-sources/bitbucket.yaml
apiVersion: argoproj.io/v1alpha1
kind: EventSource
metadata:
  name: flask-event-source
  namespace: argocd
spec:
  eventBusName: default
  service:
    ports:
      - port: 12000
        targetPort: 12000
  webhook:
    flaskapp:
      port: "12000"
      endpoint: /flaskapp
      method: POST
      # authSecret:
      #   name: argo-event-token
      #   key: token
  # bitbucket:
  #   # bitbucket eventsource example with oauth bearer token auth strategy
  #   push-to-master:
  #     # key of the project
  #     projectKey: "HAC"
  #     # owner of the repository
  #     owner: "goshad"
  #     # repository slug
  #     repositorySlug: "team7-hackaton"
  #     # Bitbucket will send events to following port and endpoint
  #     webhook:
  #       # endpoint to listen to events on
  #       endpoint: /push
  #       # port to run internal HTTP server on
  #       port: "12000"
  #       # HTTP request method to allow. In this case, only POST requests are accepted
  #       method: POST
  #       # url the event-source will use to register in Bitbucket.
  #       # This url must be reachable from outside the cluster.
  #       # The name for the service is in `<event-source-name>-eventsource-svc` format.
  #       # You will need to create an Ingress or Openshift Route for the event-source service so that it can be reached from Bitbucket.
  #       url: https://bitbucket-webhook.shieldfis.com
  #     # events to listen to
  #     # Visit https://support.atlassian.com/bitbucket-cloud/docs/manage-webhooks/
  #     events:
  #       - repo:push
  #     auth:
  #       # oauthToken refers to K8s secret that stores the bitbucket oauth bearer token
  #       # Visit https://support.atlassian.com/bitbucket-cloud/docs/use-oauth-on-bitbucket-cloud/
  #       oauthToken:
  #         # Name of the K8s secret that contains the access token
  #         name: bitbucket-access
  #         # Key within the K8s secret whose corresponding value (must be base64 encoded) is access token
  #         key: token
  #     # Delete the webhook when the eventsource is deleted
  #     #deleteHookOnFinish: true
---
apiVersion: argoproj.io/v1alpha1
kind: EventBus
metadata:
  name: default
  labels:
    k8s-app: argo-workflows
spec:
  nats:
    native:
      # Optional, defaults to 3. If it is < 3, set it to 3, that is the minimal requirement.
      replicas: 3
      # Optional, authen strategy, "none" or "token", defaults to "none"
      auth: token
      imagePullSecrets:
      - name: docker
#      containerTemplate:
#        resources:
#          requests:
#            cpu: "10m"
#      metricsContainerTemplate:
#        resources:
#          requests:
#            cpu: "10m"
#      antiAffinity: false
#      persistence:
#        storageClassName: standard
#        accessMode: ReadWriteOnce
#        volumeSize: 10Gi