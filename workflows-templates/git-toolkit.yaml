
apiVersion: argoproj.io/v1alpha1
kind: ClusterWorkflowTemplate
metadata:
  name: git-toolkit
spec:
  arguments:
    parameters:
    - name: git_repo
      value: "{{workflow.parameters.git_repo}}"
    - name: git_revision
      value: "{{workflow.parameters.git_revision}}"
    - name: charts_target_revision
      value: "{{workflow.parameters.charts_target_revision}}"
    - name: argocd_app_name
      value: "{{workflow.parameters.argocd_app_name}}"
    - name: ssh_key_secret_name
      value: "{{workflow.parameters.ssh_key_secret_name}}"
    - name: working_directory
      value: "{{workflow.parameters.working_directory}}"
    - name: git_user
      value: "{{workflow.parameters.git_user}}"
    - name: git_email
      value: "{{workflow.parameters.git_email}}"
    - name: environment_name
      value: "{{workflow.parameters.environment_name | nospace | lower }}"
    - name: argo_project
      value: "{{workflow.parameters.argo_project | nospace | lower }}"
    - name: namespace
      value: "{{workflow.parameters.namespace | nospace | lower }}"
    - name: local_domain
      value: "{{workflow.parameters.local_domain | nospace | lower }}"
    - name: public_domain
      value: "{{workflow.parameters.public_domain | nospace | lower }}"
    - name: repository_name
      value: "{{workflow.parameters.repository_name}}"
  templates:
  - name: git-clone-artifacts
    inputs:
      parameters:
      - name: git_repo
      - name: git_revision
      - name: ssh_key_secret_name
      - name: working_directory
      artifacts:
      - name: source
        path: /src
        git:
          repo: '{{inputs.parameters.git_repo}}'
          revision: '{{inputs.parameters.git_revision}}'
          sshPrivateKeySecret:
            name: '{{inputs.parameters.ssh_key_secret_name}}'
            key: ssh-private-key
    container:
      image: alpine
      command: [sh, -c]
      args:
      - 'cp -r /src /{{inputs.parameters.working_directory}}'
      volumeMounts:
      - name: '{{inputs.parameters.working_directory}}'
        mountPath: /{{inputs.parameters.working_directory}}
  - name: git-clone-ssh
    nodeSelector:
      k8s-app: argo-workflows
    inputs:
      parameters:
      - name: git_repo
      - name: git_revision
      - name: ssh_key_secret_name
      - name: working_directory
      - name: git_user
      - name: git_email
      - name: remove_list # new feature
    script:
      image: alpine/git
      workingDir: /{{inputs.parameters.working_directory}}/
      volumeMounts:
      - name: '{{inputs.parameters.working_directory}}'
        mountPath: /{{inputs.parameters.working_directory}}
      - name: '{{inputs.parameters.ssh_key_secret_name}}'
        mountPath: "/etc/ssh-key"
        readOnly: true
      command: [sh]
      # can we remove the line rm -rf argocd ?
      source: |
        set -euo pipefail
        eval "$( ssh-agent -s )"
        ssh-add /etc/ssh-key/ssh-private-key
        git config --global user.name '{{inputs.parameters.git_user}}'
        git config --global user.email '{{inputs.parameters.git_email}}'
        rm -rf argocd
        git clone '{{inputs.parameters.git_repo}}'
        rm -rf '{{inputs.parameters.remove_list}}'
        ls -alt
      env:
      - name: GIT_SSH_COMMAND
        value: ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no
  - name: update-values-yaml
    inputs:
      parameters:
      - name: working_directory
      - name: environment_name
      - name: argo_project
      - name: namespace
      - name: charts_target_revision
      - name: local_domain
      - name: public_domain
    script:
      image: alpine/git
      workingDir: /{{inputs.parameters.working_directory}}/
      volumeMounts:
      - name: '{{inputs.parameters.working_directory}}'
        mountPath: /{{inputs.parameters.working_directory}}
      command: [sh]
      source: |
        mkdir -p argocd/shield-app/{{inputs.parameters.environment_name}}
        cp -R argocd/shield-app/template/* argocd/shield-app/{{inputs.parameters.environment_name}}
        cd argocd/shield-app/{{inputs.parameters.environment_name}}/
        wget https://github.com/mikefarah/yq/releases/download/v4.13.5/yq_linux_amd64 -O /usr/bin/yq && chmod +x /usr/bin/yq
        yq e ".namespace = \"{{inputs.parameters.namespace}}\"" -i values.yaml
        yq e ".project = \"{{inputs.parameters.argo_project}}\"" -i values.yaml
        yq e ".localDomain = \"{{inputs.parameters.local_domain}}\"" -i values.yaml
        yq e ".publicDomain = \"{{inputs.parameters.public_domain}}\"" -i values.yaml
        yq e ".targetRevision = \"{{inputs.parameters.charts_target_revision}}\"" -i values.yaml
        cat values.yaml
  - name: git-commit-push-ssh
    inputs:
      parameters:
      - name: git_repo
      - name: git_revision
      - name: ssh_key_secret_name
      - name: working_directory
      - name: git_user
      - name: git_email
      - name: environment_name
    script:
      image: alpine/git
      workingDir: /{{inputs.parameters.working_directory}}/
      volumeMounts:
      - name: '{{inputs.parameters.working_directory}}'
        mountPath: /{{inputs.parameters.working_directory}}
      - name: '{{inputs.parameters.ssh_key_secret_name}}'
        mountPath: "/etc/ssh-key"
        readOnly: true
      command: [sh]
      source: |
        set -euo pipefail
        eval "$( ssh-agent -s )"
        ssh-add /etc/ssh-key/ssh-private-key
        git config --global user.name '{{inputs.parameters.git_user}}'
        git config --global user.email '{{inputs.parameters.git_email}}'
        cd argocd/
        git add shield-app/{{inputs.parameters.environment_name}}/*
        git commit -m "{{inputs.parameters.environment_name}} env added"
        git push
      env:
      - name: GIT_SSH_COMMAND
        value: ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no
  - name: add-argocd-app
    inputs:
      parameters:
      - name: working_directory
      - name: environment_name
      - name: argocd_app_name
    script:
      image: alpine/git
      workingDir: /{{inputs.parameters.working_directory}}/
      volumeMounts:
      - name: '{{inputs.parameters.working_directory}}'
        mountPath: /{{inputs.parameters.working_directory}}
      command: [sh]
      source: |
        cp argocd/app-store/{{inputs.parameters.argocd_app_name}}.yaml argocd/shield-app/{{inputs.parameters.environment_name}}/templates/
  - name: add-argocd-app-commit
    inputs:
      parameters:
      - name: git_repo
      - name: git_revision
      - name: ssh_key_secret_name
      - name: working_directory
      - name: git_user
      - name: git_email
      - name: environment_name
      - name: argocd_app_name
    script:
      image: alpine/git
      workingDir: /{{inputs.parameters.working_directory}}/
      volumeMounts:
      - name: '{{inputs.parameters.working_directory}}'
        mountPath: /{{inputs.parameters.working_directory}}
      - name: '{{inputs.parameters.ssh_key_secret_name}}'
        mountPath: "/etc/ssh-key"
        readOnly: true
      command: [sh]
      source: |
        cp argocd/app-store/{{inputs.parameters.argocd_app_name}}.yaml argocd/shield-app/{{inputs.parameters.environment_name}}/templates/
        set -euo pipefail
        eval "$( ssh-agent -s )"
        ssh-add /etc/ssh-key/ssh-private-key
        git config --global user.name '{{inputs.parameters.git_user}}'
        git config --global user.email '{{inputs.parameters.git_email}}'
        cd argocd/
        git add shield-app/{{inputs.parameters.environment_name}}/templates/{{inputs.parameters.argocd_app_name}}.yaml
        git commit -m "{{inputs.parameters.argocd_app_name}} application is added to {{inputs.parameters.environment_name}} env"
        git push
      env:
      - name: GIT_SSH_COMMAND
        value: ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no
  - name: git-pull-ssh
    nodeSelector:
      k8s-app: argo-workflows
    inputs:
      parameters:
      - name: git_repo
      - name: git_revision
      - name: ssh_key_secret_name
      - name: working_directory
      - name: git_user
      - name: git_email
      - name: remove_list # new feature
      - name: repository_name
    script:
      image: alpine/git
      workingDir: /{{inputs.parameters.working_directory}}/{{inputs.parameters.repository_name}}/
      volumeMounts:
      - name: '{{inputs.parameters.working_directory}}'
        mountPath: /{{inputs.parameters.working_directory}}
      - name: '{{inputs.parameters.ssh_key_secret_name}}'
        mountPath: "/etc/ssh-key"
        readOnly: true
      command: [sh]
      source: |
        set -euo pipefail
        eval "$( ssh-agent -s )"
        ssh-add /etc/ssh-key/ssh-private-key
        git config --global user.name '{{inputs.parameters.git_user}}'
        git config --global user.email '{{inputs.parameters.git_email}}'
        rm -rf argocd
        pwd
        ls -alt
        git config --global --add safe.directory $(pwd)
        git pull '{{inputs.parameters.git_repo}}'
        rm -rf '{{inputs.parameters.remove_list}}'
      env:
      - name: GIT_SSH_COMMAND
        value: ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no
  - name: git-update-repo-ssh
    nodeSelector:
      k8s-app: argo-workflows
    inputs:
      parameters:
        - name: git_repo
        - name: git_revision
        - name: ssh_key_secret_name
        - name: working_directory
        - name: git_user
        - name: git_email
        - name: remove_list # new feature
        - name: repository_name
    dag:
      tasks:
        - name: check-empty
          templateRef:
            name: common-toolkit 
            template: is-empty
            clusterScope: true
          arguments:
            parameters:
            - name: working_directory
              value: "{{inputs.parameters.working_directory}}"
            - name: repository_name
              value: "{{inputs.parameters.repository_name}}"
        - name: git-clone
          templateRef:
            name: git-toolkit
            template: git-clone-ssh
            clusterScope: true
          arguments:
            parameters:
            - name: git_repo
              value: "{{inputs.parameters.git_repo}}"
            - name: git_revision
              value: "{{inputs.parameters.git_revision}}"
            - name: ssh_key_secret_name
              value: "{{inputs.parameters.ssh_key_secret_name}}"
            - name: working_directory
              value: "{{inputs.parameters.working_directory}}"
            - name: git_user
              value: "{{inputs.parameters.git_user}}"
            - name: git_email
              value: "{{inputs.parameters.git_email}}"
            - name: remove_list
              value: "{{inputs.parameters.remove_list}}"
          dependencies:
          - check-empty
          when: "{{tasks.check-empty.outputs.result}} == 0"
        - name: git-pull
          templateRef:
            name: git-toolkit
            template: git-pull-ssh
            clusterScope: true
          arguments:
            parameters:
            - name: git_repo
              value: "{{inputs.parameters.git_repo}}"
            - name: git_revision
              value: "{{inputs.parameters.git_revision}}"
            - name: ssh_key_secret_name
              value: "{{inputs.parameters.ssh_key_secret_name}}"
            - name: working_directory
              value: "{{inputs.parameters.working_directory}}"
            - name: git_user
              value: "{{inputs.parameters.git_user}}"
            - name: git_email
              value: "{{inputs.parameters.git_email}}"
            - name: remove_list
              value: "{{inputs.parameters.remove_list}}"
            - name: repository_name
              value: "{{inputs.parameters.repository_name}}"
          dependencies:
          - check-empty
          when: "{{tasks.check-empty.outputs.result}} != 0"
      